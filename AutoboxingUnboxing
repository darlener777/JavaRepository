	    // You job is to create a simple banking application.
        // There should be a Bank class
        // It should have an arraylist of Branches
        // Each Branch should have an arraylist of Customers
        // The Customer class should have an arraylist of Doubles (transactions)
        // Customer:
        // Name, and the ArrayList of doubles.
        // Branch:
        // Need to be able to add a new customer and initial transaction amount.
        // Also needs to add additional transactions for that customer/branch
        // Bank:
        // Add a new branch
        // Add a customer to that branch with initial transaction
        // Add a transaction for an existing customer for that branch
        // Show a list of customers for a particular branch and optionally a list
        // of their transactions
        // Demonstration autoboxing and unboxing in your code
        // Hint: Transactions
        // Add data validation.
        // e.g. check if exists, or does not exist, etc.
        // Think about where you are adding the code to perform certain actions
        
package com.company;

public class Main
{

    public static void main(String[] args)
    {
        Bank bank = new Bank("Chase");
        bank.addBranch("Mobile");
        // add customers to this branch
        bank.addCustomer("Mobile", "Dee", 90.00);
        bank.addCustomer("Mobile", "Pat", 50.23);
        bank.addCustomer("Mobile", "Nery", 1000.44);

        bank.addBranch("Computer");
        bank.addCustomer("Computer", "Paul", 23.56);

        bank.addCustomerTransaction("Mobile", "Dee", 200);
        bank.addCustomerTransaction("Mobile", "Pat", 300);
        bank.addCustomerTransaction("Mobile", "Nery", 400);

        bank.listCustomers("Mobile", true);
        bank.listCustomers("Computer", false);

        // error handling
        if(bank.addCustomer("American Express", "Shawn", 5.53))
            System.out.println("Bank doesn't exist");
        if(bank.addBranch("Mobile"))
            System.out.println("Bank already exists");
        if(bank.addBranch("Mobile"))
            System.out.println("Bank created");
        if(bank.addCustomerTransaction("Mobile", "Fergry", 50.5))
            System.out.println("Customer doesn't exist at this branch");
        if(bank.addCustomerTransaction("Mobile", "Dee", 10.10))
            System.out.println("Customer already exists");
    }
}

================================================================================================================
/* CUSTOMER CLASS */
package com.company;

import java.util.ArrayList;

public class Customer
{
    private String name;
    private ArrayList<Double> transcations;

    public Customer(String name, double initialAmount)
    {
        this.name = name;
        this.transcations = new ArrayList<Double>();
        addTransaction(initialAmount);
    }

    public void addTransaction(double amount)
    {
        this.transcations.add(amount);
    }

    public String getName()
    {
        return name;
    }

    public ArrayList<Double> getTranscations()
    {
        return transcations;
    }
}
================================================================================================================
/* BRANCH CLASS */
package com.company;

import java.util.ArrayList;

public class Branch
{
    private String name;
    private ArrayList<Customer> customers;

    public Branch(String name)
    {
        this.name = name;
        this.customers = new ArrayList<Customer>();
    }

    public String getName()
    {
        return name;
    }

    public ArrayList<Customer> getCustomers()
    {
        return customers;
    }

    public boolean newCustomer(String customerName, double initialAmount)
    {
        // if it is not on file
        if(findCustomer(customerName) == null)
        {
            // we add customer
            this.customers.add(new Customer(customerName, initialAmount));
            return true;
        }
        return false; // if we cant find customer
    }

    public boolean addCustomerTransaction(String customerName, double amount)
    {
        // get the customer record and add amount
        Customer existingCustomer = findCustomer(customerName);
        // if it is on file
        if(existingCustomer != null)
        {
            existingCustomer.addTransaction(amount);
            return true;
        }
        return false; // if we did not find customer
    }

    // only used internally thats why its private
    private Customer findCustomer(String customerName)
    {
        // go through list of customers in branch
        for(int counter = 0; counter < customers.size(); counter++)
        {
            // if the customer name is the same as the one passed
            Customer checkedCustomer = this.customers.get(counter);
            // if there is a match
            if(this.customers.get(counter).getName().equals(customerName))
                // return name
                return checkedCustomer;
        }
        return null; // if there is no match
    }
}
================================================================================================================
/* BANK CLASS */
package com.company;

import java.util.ArrayList;

public class Bank
{
    private String name;
    private ArrayList<Branch> branches;

    public Bank(String name)
    {
        this.name = name;
        this.branches = new ArrayList<Branch>();
    }

    public boolean addBranch(String branchName)
    {
        // if it isnt found
        if(findBranch(branchName) == null)
        {
            // add to array list of branches
            this.branches.add(new Branch(branchName));
            return true;
        }
        return false; // if it isnt there
    }

    public boolean addCustomer(String branchName, String customerName, double initialAmount)
    {
        Branch branch = findBranch(branchName);
        // if it is found
        if(branch != null)
            return branch.newCustomer(customerName, initialAmount);
        return false; // if not found
    }

    // add transaction
    public boolean addCustomerTransaction(String branchName, String customerName, double amount)
    {
        Branch branch = findBranch(branchName);
        // if it is found
        if(branch != null)
            return branch.addCustomerTransaction(customerName, amount);
        return false; // if not found
    }

    // find branch
    private Branch findBranch(String branchName)
    {
        // go through list of customers in branch
        for(int counter = 0; counter < branches.size(); counter++)
        {
            // if customer name is the same as the one passed
            Branch checkedBranch = branches.get(counter);
            // if there is a match
            if(branches.get(counter).getName().equals(branchName))
                return checkedBranch;
        }
        return null; // if no match
    }

    // list customers
    public boolean listCustomers(String branchName, boolean showTransactions)
    {
        Branch branch = findBranch(branchName);
        if(branchName != null)
        {
            System.out.println("Customer details for branch " + branch.getName());
            // get a list of customers that are part of the branch
            ArrayList<Customer> branchCustomers = branch.getCustomers();
            // print them out
            for(int counter = 0; counter < branchCustomers.size(); counter++)
            {
                Customer branchCustomer = branchCustomers.get(counter);
                System.out.printf("Customer " + branchCustomer.getName() + "[" + (counter + 1) + "]");

                if(showTransactions)
                {
                    System.out.println("Transactions");
                    // if array list of our transactions
                    ArrayList<Double> transactions = branchCustomer.getTranscations();
                    for(counter = 0; counter < transactions.size(); counter++)
                    {
                        System.out.println("[" + (counter + 1) + "] Amount " + transactions.get(counter));
                    }
                }
            }
            return true; // if there no customers on the file it will still work will print out nothing
        }
        else
            return false;
    }
}
