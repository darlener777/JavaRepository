package com.company;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Scanner;

public class Main
{

    public static void main(String[] args)
    {
        // linked list is an alternative for an array as data gets bigger arrays can become slower when trying to remove and
        // add elements
        LinkedList<String> placesToVisit = new LinkedList<String>();
        LinkedList<String> californiaPlaces = new LinkedList<String>();
        placesToVisit.add("Sydney");
        placesToVisit.add("Melbourne");
        placesToVisit.add("Brisbane");
        placesToVisit.add("Perth");
        placesToVisit.add("Adelaide");
        placesToVisit.add("Darwin");

        // insert a city into position 1
        placesToVisit.add(1, "Alice Springs");

        // removes city in index 4
        placesToVisit.remove(4);
        printList(placesToVisit);

        // alphabetical order
        addInOrder(californiaPlaces, "San Jose");
        addInOrder(californiaPlaces, "Oakland");
        addInOrder(californiaPlaces, "SF");
        addInOrder(californiaPlaces, "Sacramento");
        addInOrder(californiaPlaces, "Vallejo");
        addInOrder(californiaPlaces, "Modesto");
        addInOrder(californiaPlaces, "San Jose"); // prints "San jose is already included as destination"
       // prints out in alphabetical order
        printList(californiaPlaces);

        visit(californiaPlaces); // menu pops up while we are visiting our 1st city Modesto
    }

    // print the list
    private static void printList(LinkedList<String> linkedList)
    {
        // iterator to go through elements in list
        Iterator<String> iterator = linkedList.iterator();
        // while there is at least one more record
        while(iterator.hasNext())
            // show record and move to next entry // same as ++
            System.out.println("Now visiting " + iterator.next());
        System.out.println("==============================================");
    }

    // alphabetical order
    private static boolean addInOrder(LinkedList<String> linkedList, String newCity)
    {
        // create a list iterator so that every entry is going to go the 1st stored entry in linked list
        Iterator<String> stringListIterator = linkedList.listIterator();

        // navigate through entries
        while (stringListIterator.hasNext())
        {
            // goes to first entry
            // gives us a number and if the number is 0 then the value is matched
            int comparision = stringListIterator.next().compareTo(newCity);
            if(comparision == 0)
            {
                // they are equal don't add
                System.out.println(newCity + " is already included as a destination");
                return false;
            }
            else if(comparision > 0)
            {
                // new city should appear before this one
                // brisbane -> adelaide
                // need to move back to the previous entry
                ((ListIterator<String>) stringListIterator).previous();
                // then add city
                ((ListIterator<String>) stringListIterator).add(newCity);
                return true;
            }
            else if(comparision < 0)
            {
                // move to the next city
                // since we dont .next above it already moved onto the next city
                // we dont need to do anythin
            }
        }
        // new item goes to the end of the list
        ((ListIterator<String>) stringListIterator).add(newCity);
        return true;
    }

    private static void visit(LinkedList cities)
    {
        Scanner scanner = new Scanner(System.in);
        boolean quit = false;
        // track the direction
        boolean goingForward = true;
        ListIterator<String> listIterator = cities.listIterator();

        // if there is no cities
        if(cities.isEmpty())
        {
            System.out.println("No cities in this itenerary");
            return;
        }
        // print out the city we are visiting and move to the next
        else
        {
            System.out.println("Now visiting " + listIterator.next());
            printMenu();
        }

        while(!quit) {
            int userInput = scanner.nextInt();
            switch (userInput) {
                case 0:
                    System.out.println("Holiday/Vacation is over");
                    quit = true;
                    break;
                case 1:
                    // if user wants to go back
                    if (!goingForward) {
                        // make sure we can go next
                        if (listIterator.hasNext())
                            listIterator.next();
                        goingForward = true;
                    }
                    // check if there is another entry
                    if (listIterator.hasNext())
                        System.out.printf("Now visiting " + listIterator.next());
                    else {
                        System.out.println("Reached the end of the list");
                        // no way to go forward if we are at the end of the list
                        goingForward = false;
                    }
                    break;
                case 2:
                    if (goingForward) {
                        // make sure we can go back
                        if (listIterator.hasPrevious())
                            listIterator.previous();
                        goingForward = false;
                    }
                    // check if there is another entry
                    if (listIterator.hasPrevious())
                        System.out.println("Now visiting " + listIterator.previous());
                    else {
                        System.out.println("Reached the beginning of the list");
                        // no way to go backwards if we are at the end of the list
                        goingForward = true;
                    }
                    break;
                case 3:
                    printMenu();
                    break;
            }
        }
    }

    // print menu
    private static void printMenu()
    {
        System.out.println("Available actions:\npress");
        System.out.println("0 - To quit\n" + "1 - Go to next city\n" + "2 - Go to previous city\n" + "3 - Print menu\n");
    }
}
 
