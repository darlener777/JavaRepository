package com.company;
public class Main
{

    public static void main(String[] args)
    {
        // create employees
        Employee e1 = new SalaryEmployee(101, "Bill", 1000);
        Employee e2 = new SalaryEmployee(102,"Steve", 5000);
        Employee e3 = new SalaryEmployee(103, "Dee", 250.00);

        // create departments
        Department d1 = new Department("Engineering");
        Department d2 = new Department("Sociology");

        // add 3 employees to department 1
        d1.addEmployee(e1);
        d1.addEmployee(e2);
        d1.addEmployee(e3);

        System.out.println(d1);
        d1.removeEmployee(101); // removes 101 employee
        System.out.println(d1);
    }
}

================================================================================================
/* EMPLOYEE CLASS */

package com.company;

public abstract class Employee
{
    public abstract double getMonthlyPay(); // make getMonthly abstract which forces each subclass to implement it

    private int id;
    private String name;

    public Employee()
    {
        id = 0;
        name = "Unknown";
    }

    public Employee(int id, String name)
    {
        this.id = id;
        this.name = name;
    }

    public void setId(int id)
    {
        this.id = id;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public int getId()
    {
        return id;
    }

    public String getName()
    {
        return name;
    }

    public String toString()
    {
        return String.format("ID: %d\tName: %s", id,name);
    }
}
================================================================================================
/* SALARYEMPLOYEE CLASS */
package com.company;

public class SalaryEmployee extends Employee
{
    private double weeklyPay;

    public SalaryEmployee()
    {
        super();
        weeklyPay = 0.0;
    }

    public SalaryEmployee(int id, String name, double weeklyPay)
    {
        super(id,name);
        this.weeklyPay = weeklyPay;
    }

    public void setWeeklyPay(double weeklyPay)
    {
        this.weeklyPay = weeklyPay;
    }

    public double getWeeklyPay()
    {
        return weeklyPay;
    }

    @Override
    public double getMonthlyPay()
    {
        // 4 weeks in a month
        return weeklyPay * 4;
    }

    public String toString()
    {
        String output = "";
        // gets name and id from super class
        output += super.toString();
        output  += String.format(" is paid $%.2f weekly", weeklyPay);
        return output;
    }
}
================================================================================================
/* HOURLYEMPLOYEE CLASS */

package com.company;

public class HourlyEmployee extends Employee
{
    private double hourlyPay;

    public HourlyEmployee()
    {
        super();
        hourlyPay = 0.0;
    }

    public HourlyEmployee(int id, String name, double hourlyPay)
    {
        super(id, name);
        this.hourlyPay = hourlyPay;
    }

    public void setHourlyPay(double hourlyPay)
    {
        this.hourlyPay = hourlyPay;
    }

    public double getHourlyPay()
    {
        return hourlyPay;
    }

    @Override
    public double getMonthlyPay()
    {
        // 160 hours a week
        return hourlyPay * 160;
    }

    @Override
    public String toString()
    {
        String output = "";
        // gets name and id from super class
        output += super.toString();
        output  += String.format(" is paid $%.2f weekly", hourlyPay);
        return output;
    }
}
================================================================================================

/* DEPARTMENT CLASS */
package com.company;

public class Department
{
    private Employee[] staff;
    private String departmentName;
    private int numberOfEmployees;

    public Department()
    {
        departmentName = "No department";
        // initialize array to have 10 spaces
        staff = new Employee[10];
        numberOfEmployees = 0;
    }

    public Department(String departmentName)
    {
        this.departmentName = departmentName;
        staff = new Employee[10];
        numberOfEmployees = 0;
    }

    public void setDepartmentName(String departmentName)
    {
        this.departmentName = departmentName;
    }

    public String getDepartmentName()
    {
        return departmentName;
    }

    public int getNumberOfEmployees()
    {
        return numberOfEmployees;
    }

    public double getTotalMonthlyPay()
    {
        double total = 0;
        // go through array and get their monthly pay and have a running sum
        for(int counter = 0; counter < numberOfEmployees; counter++)
            total += staff[counter].getMonthlyPay();
        return total;
    }

    // use abstract method in employee super class
    public double getMonthlyPay()
    {
        double total = 0;
        // go through array and get their monthly pay and have a running sum
        for(int counter = 0; counter < numberOfEmployees; counter++)
            total += staff[counter].getMonthlyPay();
        return total;
    }

    // pass in a reference to employee object
    public boolean addEmployee(Employee employee)
    {
        // make sure we have enough room
        if(numberOfEmployees == 10)
            return false;
        // if we have room add employee which is at it's index
        staff[numberOfEmployees++] = employee;
        return true;
    }

    public boolean removeEmployee(int id)
    {
        // go through each member of staff
        for(int counter = 0; counter < numberOfEmployees; counter++)
        {
            // check if id exists in the array // make sure there is an object before anything
            if(staff[counter] != null)
                // match employee with their employee id
                if(staff[counter].getId() == id)
                {
                    // take the last employee and shift it to the front
                    staff[counter] = staff[--numberOfEmployees];
                    staff[numberOfEmployees] = null; // has to equal null since its a copy
                    return true;
                }
        }
        return false;
    }

    // if the number of employees is less than 10 we can hire more
    public boolean canHireMore()
    {
        return (numberOfEmployees < 10);
    }

    @Override
    public String toString()
    {
        String output = "";
        output += String.format("Department %s\t", departmentName);
        output += String.format("Number of employees = %d\n", numberOfEmployees);

        // to print out an employee array
        for(int counter = 0; counter < numberOfEmployees; counter++)
        {
            output += String.format("\t%s\n", staff[counter]);
        }
        output += String.format("Total monthly pay for %s: $%.2f\n", departmentName,getTotalMonthlyPay());
        return output;
    }
}
